// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix_multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        matrix_A_V_address0,
        matrix_A_V_ce0,
        matrix_A_V_q0,
        matrix_B_V_address0,
        matrix_B_V_ce0,
        matrix_B_V_q0,
        matrix_C_V_address0,
        matrix_C_V_ce0,
        matrix_C_V_we0,
        matrix_C_V_d0,
        matrix_C_V_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] matrix_A_V_address0;
output   matrix_A_V_ce0;
input  [5:0] matrix_A_V_q0;
output  [13:0] matrix_B_V_address0;
output   matrix_B_V_ce0;
input  [5:0] matrix_B_V_q0;
output  [12:0] matrix_C_V_address0;
output   matrix_C_V_ce0;
output   matrix_C_V_we0;
output  [19:0] matrix_C_V_d0;
input  [19:0] matrix_C_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg matrix_A_V_ce0;
reg matrix_B_V_ce0;
reg[12:0] matrix_C_V_address0;
reg matrix_C_V_ce0;
reg matrix_C_V_we0;
reg[19:0] matrix_C_V_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] i_fu_152_p2;
reg   [7:0] i_reg_327;
wire    ap_CS_fsm_state2;
wire   [14:0] zext_ln24_fu_166_p1;
reg   [14:0] zext_ln24_reg_332;
wire   [0:0] icmp_ln22_fu_146_p2;
wire   [6:0] k_fu_176_p2;
wire    ap_CS_fsm_state3;
wire   [7:0] i_1_fu_202_p2;
reg   [7:0] i_1_reg_348;
wire    ap_CS_fsm_state4;
wire   [16:0] zext_ln700_fu_216_p1;
reg   [16:0] zext_ln700_reg_353;
wire   [0:0] icmp_ln31_fu_196_p2;
wire   [14:0] zext_ln33_fu_228_p1;
reg   [14:0] zext_ln33_reg_358;
wire   [8:0] j_fu_238_p2;
reg   [8:0] j_reg_366;
wire    ap_CS_fsm_state5;
reg   [14:0] matrix_A_V_addr_reg_371;
wire   [0:0] icmp_ln33_fu_232_p2;
wire   [15:0] zext_ln35_fu_266_p1;
reg   [15:0] zext_ln35_reg_376;
wire   [6:0] k_1_fu_276_p2;
reg   [6:0] k_1_reg_384;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln35_fu_270_p2;
reg   [12:0] matrix_C_V_addr_1_reg_394;
reg  signed [5:0] matrix_A_V_load_reg_399;
wire    ap_CS_fsm_state7;
reg  signed [5:0] matrix_B_V_load_reg_404;
reg   [19:0] matrix_C_V_load_reg_409;
reg   [7:0] i_0_reg_91;
wire   [0:0] icmp_ln24_fu_170_p2;
reg   [6:0] k_0_reg_102;
reg   [7:0] i1_0_reg_113;
reg   [8:0] j_0_reg_124;
reg   [6:0] k2_0_reg_135;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln180_1_fu_191_p1;
wire   [63:0] zext_ln215_1_fu_253_p1;
wire   [63:0] zext_ln215_4_fu_295_p1;
wire   [63:0] zext_ln700_1_fu_305_p1;
wire  signed [19:0] grp_fu_316_p3;
wire   [13:0] tmp_fu_158_p3;
wire   [14:0] zext_ln180_fu_182_p1;
wire   [14:0] add_ln180_fu_186_p2;
wire   [15:0] tmp_1_fu_208_p3;
wire   [13:0] tmp_2_fu_220_p3;
wire   [16:0] zext_ln215_fu_244_p1;
wire   [16:0] add_ln215_fu_248_p2;
wire   [14:0] tmp_3_fu_258_p3;
wire   [15:0] zext_ln215_3_fu_286_p1;
wire   [15:0] add_ln215_1_fu_290_p2;
wire   [14:0] zext_ln215_2_fu_282_p1;
wire   [14:0] add_ln700_1_fu_300_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

dut_mac_muladd_6sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
dut_mac_muladd_6sbkb_U1(
    .din0(matrix_B_V_load_reg_404),
    .din1(matrix_A_V_load_reg_399),
    .din2(matrix_C_V_load_reg_409),
    .dout(grp_fu_316_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_113 <= 8'd0;
    end else if (((icmp_ln33_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_0_reg_113 <= i_1_reg_348;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_170_p2 == 1'd1))) begin
        i_0_reg_91 <= i_reg_327;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_91 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln35_fu_270_p2 == 1'd1))) begin
        j_0_reg_124 <= j_reg_366;
    end else if (((icmp_ln31_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_reg_124 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        k2_0_reg_135 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        k2_0_reg_135 <= k_1_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_102 <= 7'd0;
    end else if (((icmp_ln24_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_102 <= k_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_348 <= i_1_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_327 <= i_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_366 <= j_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_1_reg_384 <= k_1_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        matrix_A_V_addr_reg_371 <= zext_ln215_1_fu_253_p1;
        zext_ln35_reg_376[14 : 6] <= zext_ln35_fu_266_p1[14 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        matrix_A_V_load_reg_399 <= matrix_A_V_q0;
        matrix_B_V_load_reg_404 <= matrix_B_V_q0;
        matrix_C_V_load_reg_409 <= matrix_C_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        matrix_C_V_addr_1_reg_394 <= zext_ln700_1_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_146_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln24_reg_332[13 : 6] <= zext_ln24_fu_166_p1[13 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln33_reg_358[13 : 6] <= zext_ln33_fu_228_p1[13 : 6];
        zext_ln700_reg_353[15 : 8] <= zext_ln700_fu_216_p1[15 : 8];
    end
end

always @ (*) begin
    if ((((icmp_ln31_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_A_V_ce0 = 1'b1;
    end else begin
        matrix_A_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_B_V_ce0 = 1'b1;
    end else begin
        matrix_B_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        matrix_C_V_address0 = matrix_C_V_addr_1_reg_394;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrix_C_V_address0 = zext_ln700_1_fu_305_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix_C_V_address0 = zext_ln180_1_fu_191_p1;
    end else begin
        matrix_C_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        matrix_C_V_ce0 = 1'b1;
    end else begin
        matrix_C_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        matrix_C_V_d0 = grp_fu_316_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        matrix_C_V_d0 = 20'd0;
    end else begin
        matrix_C_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((icmp_ln24_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        matrix_C_V_we0 = 1'b1;
    end else begin
        matrix_C_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_146_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln24_fu_170_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln31_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln33_fu_232_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln35_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln180_fu_186_p2 = (zext_ln24_reg_332 + zext_ln180_fu_182_p1);

assign add_ln215_1_fu_290_p2 = (zext_ln35_reg_376 + zext_ln215_3_fu_286_p1);

assign add_ln215_fu_248_p2 = (zext_ln215_fu_244_p1 + zext_ln700_reg_353);

assign add_ln700_1_fu_300_p2 = (zext_ln33_reg_358 + zext_ln215_2_fu_282_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign i_1_fu_202_p2 = (i1_0_reg_113 + 8'd1);

assign i_fu_152_p2 = (i_0_reg_91 + 8'd1);

assign icmp_ln22_fu_146_p2 = ((i_0_reg_91 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_170_p2 = ((k_0_reg_102 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_196_p2 = ((i1_0_reg_113 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_232_p2 = ((j_0_reg_124 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_270_p2 = ((k2_0_reg_135 == 7'd64) ? 1'b1 : 1'b0);

assign j_fu_238_p2 = (j_0_reg_124 + 9'd1);

assign k_1_fu_276_p2 = (k2_0_reg_135 + 7'd1);

assign k_fu_176_p2 = (k_0_reg_102 + 7'd1);

assign matrix_A_V_address0 = matrix_A_V_addr_reg_371;

assign matrix_B_V_address0 = zext_ln215_4_fu_295_p1;

assign tmp_1_fu_208_p3 = {{i1_0_reg_113}, {8'd0}};

assign tmp_2_fu_220_p3 = {{i1_0_reg_113}, {6'd0}};

assign tmp_3_fu_258_p3 = {{j_0_reg_124}, {6'd0}};

assign tmp_fu_158_p3 = {{i_0_reg_91}, {6'd0}};

assign zext_ln180_1_fu_191_p1 = add_ln180_fu_186_p2;

assign zext_ln180_fu_182_p1 = k_0_reg_102;

assign zext_ln215_1_fu_253_p1 = add_ln215_fu_248_p2;

assign zext_ln215_2_fu_282_p1 = k2_0_reg_135;

assign zext_ln215_3_fu_286_p1 = k2_0_reg_135;

assign zext_ln215_4_fu_295_p1 = add_ln215_1_fu_290_p2;

assign zext_ln215_fu_244_p1 = j_0_reg_124;

assign zext_ln24_fu_166_p1 = tmp_fu_158_p3;

assign zext_ln33_fu_228_p1 = tmp_2_fu_220_p3;

assign zext_ln35_fu_266_p1 = tmp_3_fu_258_p3;

assign zext_ln700_1_fu_305_p1 = add_ln700_1_fu_300_p2;

assign zext_ln700_fu_216_p1 = tmp_1_fu_208_p3;

always @ (posedge ap_clk) begin
    zext_ln24_reg_332[5:0] <= 6'b000000;
    zext_ln24_reg_332[14] <= 1'b0;
    zext_ln700_reg_353[7:0] <= 8'b00000000;
    zext_ln700_reg_353[16] <= 1'b0;
    zext_ln33_reg_358[5:0] <= 6'b000000;
    zext_ln33_reg_358[14] <= 1'b0;
    zext_ln35_reg_376[5:0] <= 6'b000000;
    zext_ln35_reg_376[15] <= 1'b0;
end

endmodule //matrix_multiply
