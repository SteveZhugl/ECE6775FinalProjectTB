// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.634000,HLS_SYN_LAT=6874630,HLS_SYN_TPT=none,HLS_SYN_MEM=28,HLS_SYN_DSP=1,HLS_SYN_FF=908,HLS_SYN_LUT=1965,HLS_VERSION=2019_2_1}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [19:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_V_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln20_fu_258_p2;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln28_fu_548_p2;
reg    strm_out_V_V_blk_n;
wire    ap_CS_fsm_state27;
reg   [5:0] reg_230;
reg    ap_block_state3;
reg    ap_block_state14;
wire   [7:0] i_fu_240_p2;
reg   [7:0] i_reg_867;
wire    ap_CS_fsm_state2;
wire   [16:0] zext_ln20_fu_254_p1;
reg   [16:0] zext_ln20_reg_872;
wire   [0:0] icmp_ln19_fu_234_p2;
wire   [8:0] j_1_fu_264_p2;
reg   [8:0] j_1_reg_880;
wire   [16:0] add_ln180_fu_274_p2;
reg   [16:0] add_ln180_reg_885;
wire  signed [31:0] sext_ln21_fu_279_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] reg_V_fu_284_p1;
reg   [31:0] reg_V_reg_895;
wire    ap_CS_fsm_state9;
wire   [30:0] trunc_ln262_fu_288_p1;
reg   [30:0] trunc_ln262_reg_901;
reg   [0:0] p_Result_3_reg_906;
reg   [7:0] p_Result_s_reg_911;
wire   [5:0] trunc_ln283_fu_310_p1;
reg   [5:0] trunc_ln283_reg_917;
wire   [0:0] icmp_ln278_fu_328_p2;
reg   [0:0] icmp_ln278_reg_923;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln282_fu_343_p2;
reg   [0:0] icmp_ln282_reg_929;
wire   [0:0] icmp_ln285_fu_354_p2;
reg   [0:0] icmp_ln285_reg_934;
wire  signed [8:0] sh_amt_1_fu_360_p2;
reg  signed [8:0] sh_amt_1_reg_939;
wire   [0:0] and_ln284_fu_394_p2;
reg   [0:0] and_ln284_reg_944;
wire   [5:0] select_ln285_fu_406_p3;
reg   [5:0] select_ln285_reg_949;
wire   [0:0] and_ln295_fu_426_p2;
reg   [0:0] and_ln295_reg_954;
wire   [5:0] select_ln303_fu_513_p3;
reg   [5:0] select_ln303_reg_959;
wire    ap_CS_fsm_state11;
wire   [8:0] j_fu_530_p2;
reg   [8:0] j_reg_967;
wire    ap_CS_fsm_state13;
wire   [15:0] zext_ln28_fu_544_p1;
reg   [15:0] zext_ln28_reg_972;
wire   [0:0] icmp_ln27_fu_524_p2;
wire   [6:0] k_2_fu_554_p2;
reg   [6:0] k_2_reg_980;
wire   [15:0] add_ln180_1_fu_564_p2;
reg   [15:0] add_ln180_1_reg_985;
wire  signed [31:0] sext_ln29_fu_569_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] reg_V_1_fu_574_p1;
reg   [31:0] reg_V_1_reg_995;
wire    ap_CS_fsm_state20;
wire   [30:0] trunc_ln262_1_fu_578_p1;
reg   [30:0] trunc_ln262_1_reg_1001;
reg   [0:0] p_Result_5_reg_1006;
reg   [7:0] p_Result_4_reg_1011;
wire   [5:0] trunc_ln283_1_fu_600_p1;
reg   [5:0] trunc_ln283_1_reg_1017;
wire   [0:0] icmp_ln278_1_fu_618_p2;
reg   [0:0] icmp_ln278_1_reg_1023;
wire    ap_CS_fsm_state21;
wire   [0:0] icmp_ln282_1_fu_633_p2;
reg   [0:0] icmp_ln282_1_reg_1029;
wire   [0:0] icmp_ln285_1_fu_644_p2;
reg   [0:0] icmp_ln285_1_reg_1034;
wire  signed [8:0] sh_amt_3_fu_650_p2;
reg  signed [8:0] sh_amt_3_reg_1039;
wire   [0:0] and_ln284_1_fu_684_p2;
reg   [0:0] and_ln284_1_reg_1044;
wire   [5:0] select_ln285_2_fu_696_p3;
reg   [5:0] select_ln285_2_reg_1049;
wire   [0:0] and_ln295_1_fu_716_p2;
reg   [0:0] and_ln295_1_reg_1054;
wire   [5:0] select_ln303_1_fu_803_p3;
reg   [5:0] select_ln303_1_reg_1059;
wire    ap_CS_fsm_state22;
wire   [7:0] i_2_fu_820_p2;
reg   [7:0] i_2_reg_1067;
wire    ap_CS_fsm_state25;
wire   [14:0] zext_ln39_fu_834_p1;
reg   [14:0] zext_ln39_reg_1072;
wire   [0:0] icmp_ln38_fu_814_p2;
wire   [6:0] k_fu_844_p2;
reg   [6:0] k_reg_1080;
wire    ap_CS_fsm_state26;
wire   [0:0] icmp_ln39_fu_838_p2;
reg   [14:0] input1_V_address0;
reg    input1_V_ce0;
reg    input1_V_we0;
wire   [5:0] input1_V_q0;
reg   [13:0] input2_V_address0;
reg    input2_V_ce0;
reg    input2_V_we0;
wire   [5:0] input2_V_q0;
reg   [12:0] output_address0;
reg    output_ce0;
reg    output_we0;
wire   [19:0] output_q0;
wire    grp_matrix_multiply_fu_220_ap_start;
wire    grp_matrix_multiply_fu_220_ap_done;
wire    grp_matrix_multiply_fu_220_ap_idle;
wire    grp_matrix_multiply_fu_220_ap_ready;
wire   [14:0] grp_matrix_multiply_fu_220_matrix_A_V_address0;
wire    grp_matrix_multiply_fu_220_matrix_A_V_ce0;
wire   [13:0] grp_matrix_multiply_fu_220_matrix_B_V_address0;
wire    grp_matrix_multiply_fu_220_matrix_B_V_ce0;
wire   [12:0] grp_matrix_multiply_fu_220_matrix_C_V_address0;
wire    grp_matrix_multiply_fu_220_matrix_C_V_ce0;
wire    grp_matrix_multiply_fu_220_matrix_C_V_we0;
wire   [19:0] grp_matrix_multiply_fu_220_matrix_C_V_d0;
reg   [7:0] i_0_reg_154;
reg   [8:0] j_0_reg_165;
wire    ap_CS_fsm_state12;
reg   [8:0] j12_0_reg_176;
reg   [6:0] k_0_reg_187;
wire    ap_CS_fsm_state23;
reg   [7:0] i13_0_reg_198;
wire    ap_CS_fsm_state24;
reg   [6:0] k14_0_reg_209;
reg    grp_matrix_multiply_fu_220_ap_start_reg;
wire   [63:0] zext_ln180_2_fu_520_p1;
wire   [63:0] zext_ln180_4_fu_810_p1;
wire   [63:0] zext_ln176_1_fu_859_p1;
reg  signed [31:0] grp_fu_227_p0;
wire   [15:0] tmp_4_fu_246_p3;
wire   [16:0] zext_ln180_fu_270_p1;
wire   [31:0] grp_fu_227_p1;
wire   [22:0] trunc_ln270_fu_317_p1;
wire   [8:0] exp_V_fu_314_p1;
wire  signed [8:0] sh_amt_fu_333_p2;
wire   [23:0] tmp_fu_320_p3;
wire  signed [23:0] sext_ln281_fu_339_p1;
wire   [23:0] lshr_ln286_fu_372_p2;
wire   [0:0] or_ln282_fu_382_p2;
wire   [0:0] icmp_ln284_fu_348_p2;
wire   [0:0] xor_ln282_fu_388_p2;
wire   [0:0] and_ln285_fu_400_p2;
wire   [5:0] trunc_ln286_fu_378_p1;
wire   [0:0] or_ln284_fu_414_p2;
wire   [0:0] icmp_ln295_fu_366_p2;
wire   [0:0] xor_ln284_fu_420_p2;
wire   [0:0] tmp_3_fu_435_p3;
wire  signed [31:0] sext_ln294_fu_432_p1;
wire   [5:0] sext_ln294cast_fu_450_p1;
wire   [5:0] shl_ln297_fu_454_p2;
wire   [5:0] select_ln295_fu_459_p3;
wire   [0:0] xor_ln285_fu_472_p2;
wire   [0:0] and_ln285_1_fu_477_p2;
wire   [5:0] select_ln288_fu_442_p3;
wire   [5:0] select_ln278_fu_465_p3;
wire   [0:0] xor_ln278_fu_490_p2;
wire   [0:0] and_ln282_fu_495_p2;
wire   [5:0] select_ln285_1_fu_482_p3;
wire   [5:0] select_ln282_fu_500_p3;
wire   [5:0] sub_ln461_fu_507_p2;
wire   [14:0] tmp_5_fu_536_p3;
wire   [15:0] zext_ln180_3_fu_560_p1;
wire   [22:0] trunc_ln270_1_fu_607_p1;
wire   [8:0] exp_V_1_fu_604_p1;
wire  signed [8:0] sh_amt_2_fu_623_p2;
wire   [23:0] tmp_1_fu_610_p3;
wire  signed [23:0] sext_ln281_1_fu_629_p1;
wire   [23:0] lshr_ln286_1_fu_662_p2;
wire   [0:0] or_ln282_1_fu_672_p2;
wire   [0:0] icmp_ln284_1_fu_638_p2;
wire   [0:0] xor_ln282_1_fu_678_p2;
wire   [0:0] and_ln285_2_fu_690_p2;
wire   [5:0] trunc_ln286_1_fu_668_p1;
wire   [0:0] or_ln284_1_fu_704_p2;
wire   [0:0] icmp_ln295_1_fu_656_p2;
wire   [0:0] xor_ln284_1_fu_710_p2;
wire   [0:0] tmp_8_fu_725_p3;
wire  signed [31:0] sext_ln294_1_fu_722_p1;
wire   [5:0] sext_ln294_1cast_fu_740_p1;
wire   [5:0] shl_ln297_1_fu_744_p2;
wire   [5:0] select_ln295_1_fu_749_p3;
wire   [0:0] xor_ln285_1_fu_762_p2;
wire   [0:0] and_ln285_3_fu_767_p2;
wire   [5:0] select_ln288_1_fu_732_p3;
wire   [5:0] select_ln278_1_fu_755_p3;
wire   [0:0] xor_ln278_1_fu_780_p2;
wire   [0:0] and_ln282_1_fu_785_p2;
wire   [5:0] select_ln285_3_fu_772_p3;
wire   [5:0] select_ln282_1_fu_790_p3;
wire   [5:0] sub_ln461_1_fu_797_p2;
wire   [13:0] tmp_6_fu_826_p3;
wire   [14:0] zext_ln176_fu_850_p1;
wire   [14:0] add_ln176_fu_854_p2;
reg   [26:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 grp_matrix_multiply_fu_220_ap_start_reg = 1'b0;
end

dut_input1_V #(
    .DataWidth( 6 ),
    .AddressRange( 32768 ),
    .AddressWidth( 15 ))
input1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input1_V_address0),
    .ce0(input1_V_ce0),
    .we0(input1_V_we0),
    .d0(select_ln303_reg_959),
    .q0(input1_V_q0)
);

dut_input2_V #(
    .DataWidth( 6 ),
    .AddressRange( 16384 ),
    .AddressWidth( 14 ))
input2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input2_V_address0),
    .ce0(input2_V_ce0),
    .we0(input2_V_we0),
    .d0(select_ln303_1_reg_1059),
    .q0(input2_V_q0)
);

dut_output #(
    .DataWidth( 20 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(grp_matrix_multiply_fu_220_matrix_C_V_d0),
    .q0(output_q0)
);

matrix_multiply grp_matrix_multiply_fu_220(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_multiply_fu_220_ap_start),
    .ap_done(grp_matrix_multiply_fu_220_ap_done),
    .ap_idle(grp_matrix_multiply_fu_220_ap_idle),
    .ap_ready(grp_matrix_multiply_fu_220_ap_ready),
    .matrix_A_V_address0(grp_matrix_multiply_fu_220_matrix_A_V_address0),
    .matrix_A_V_ce0(grp_matrix_multiply_fu_220_matrix_A_V_ce0),
    .matrix_A_V_q0(input1_V_q0),
    .matrix_B_V_address0(grp_matrix_multiply_fu_220_matrix_B_V_address0),
    .matrix_B_V_ce0(grp_matrix_multiply_fu_220_matrix_B_V_ce0),
    .matrix_B_V_q0(input2_V_q0),
    .matrix_C_V_address0(grp_matrix_multiply_fu_220_matrix_C_V_address0),
    .matrix_C_V_ce0(grp_matrix_multiply_fu_220_matrix_C_V_ce0),
    .matrix_C_V_we0(grp_matrix_multiply_fu_220_matrix_C_V_we0),
    .matrix_C_V_d0(grp_matrix_multiply_fu_220_matrix_C_V_d0),
    .matrix_C_V_q0(output_q0)
);

dut_sitofp_32s_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_sitofp_32s_32cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_227_p0),
    .ce(1'b1),
    .dout(grp_fu_227_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_multiply_fu_220_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln27_fu_524_p2 == 1'd1))) begin
            grp_matrix_multiply_fu_220_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_multiply_fu_220_ap_ready == 1'b1)) begin
            grp_matrix_multiply_fu_220_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_838_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
        i13_0_reg_198 <= i_2_reg_1067;
    end else if (((grp_matrix_multiply_fu_220_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
        i13_0_reg_198 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln20_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_154 <= i_reg_867;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_154 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_234_p2 == 1'd1))) begin
        j12_0_reg_176 <= 9'd0;
    end else if ((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln28_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        j12_0_reg_176 <= j_reg_967;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_165 <= 9'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_0_reg_165 <= j_1_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        k14_0_reg_209 <= 7'd0;
    end else if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        k14_0_reg_209 <= k_reg_1080;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        k_0_reg_187 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        k_0_reg_187 <= k_2_reg_980;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln28_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        add_ln180_1_reg_985 <= add_ln180_1_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln20_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln180_reg_885 <= add_ln180_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        and_ln284_1_reg_1044 <= and_ln284_1_fu_684_p2;
        and_ln295_1_reg_1054 <= and_ln295_1_fu_716_p2;
        icmp_ln278_1_reg_1023 <= icmp_ln278_1_fu_618_p2;
        icmp_ln282_1_reg_1029 <= icmp_ln282_1_fu_633_p2;
        icmp_ln285_1_reg_1034 <= icmp_ln285_1_fu_644_p2;
        select_ln285_2_reg_1049 <= select_ln285_2_fu_696_p3;
        sh_amt_3_reg_1039 <= sh_amt_3_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        and_ln284_reg_944 <= and_ln284_fu_394_p2;
        and_ln295_reg_954 <= and_ln295_fu_426_p2;
        icmp_ln278_reg_923 <= icmp_ln278_fu_328_p2;
        icmp_ln282_reg_929 <= icmp_ln282_fu_343_p2;
        icmp_ln285_reg_934 <= icmp_ln285_fu_354_p2;
        select_ln285_reg_949 <= select_ln285_fu_406_p3;
        sh_amt_1_reg_939 <= sh_amt_1_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        i_2_reg_1067 <= i_2_fu_820_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_867 <= i_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        j_1_reg_880 <= j_1_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_967 <= j_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state14))) begin
        k_2_reg_980 <= k_2_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        k_reg_1080 <= k_fu_844_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Result_3_reg_906 <= reg_V_fu_284_p1[32'd31];
        p_Result_s_reg_911 <= {{reg_V_fu_284_p1[30:23]}};
        reg_V_reg_895 <= reg_V_fu_284_p1;
        trunc_ln262_reg_901 <= trunc_ln262_fu_288_p1;
        trunc_ln283_reg_917 <= trunc_ln283_fu_310_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        p_Result_4_reg_1011 <= {{reg_V_1_fu_574_p1[30:23]}};
        p_Result_5_reg_1006 <= reg_V_1_fu_574_p1[32'd31];
        reg_V_1_reg_995 <= reg_V_1_fu_574_p1;
        trunc_ln262_1_reg_1001 <= trunc_ln262_1_fu_578_p1;
        trunc_ln283_1_reg_1017 <= trunc_ln283_1_fu_600_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln28_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | (~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln20_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        reg_230 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        select_ln303_1_reg_1059 <= select_ln303_1_fu_803_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        select_ln303_reg_959 <= select_ln303_fu_513_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln20_reg_872[15 : 8] <= zext_ln20_fu_254_p1[15 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        zext_ln28_reg_972[14 : 6] <= zext_ln28_fu_544_p1[14 : 6];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_814_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state25))) begin
        zext_ln39_reg_1072[13 : 6] <= zext_ln39_fu_834_p1[13 : 6];
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_814_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_814_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_227_p0 = sext_ln29_fu_569_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_227_p0 = sext_ln21_fu_279_p1;
    end else begin
        grp_fu_227_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input1_V_address0 = zext_ln180_2_fu_520_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input1_V_address0 = grp_matrix_multiply_fu_220_matrix_A_V_address0;
    end else begin
        input1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input1_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input1_V_ce0 = grp_matrix_multiply_fu_220_matrix_A_V_ce0;
    end else begin
        input1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input1_V_we0 = 1'b1;
    end else begin
        input1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input2_V_address0 = zext_ln180_4_fu_810_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input2_V_address0 = grp_matrix_multiply_fu_220_matrix_B_V_address0;
    end else begin
        input2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input2_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input2_V_ce0 = grp_matrix_multiply_fu_220_matrix_B_V_ce0;
    end else begin
        input2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input2_V_we0 = 1'b1;
    end else begin
        input2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output_address0 = zext_ln176_1_fu_859_p1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_address0 = grp_matrix_multiply_fu_220_matrix_C_V_address0;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        output_ce0 = grp_matrix_multiply_fu_220_matrix_C_V_ce0;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        output_we0 = grp_matrix_multiply_fu_220_matrix_C_V_we0;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln28_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | ((icmp_ln20_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln28_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14)) | (~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln20_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln19_fu_234_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln20_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln20_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln27_fu_524_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state14 : begin
            if ((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln28_fu_548_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else if ((~((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0)) & (icmp_ln28_fu_548_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state24 : begin
            if (((grp_matrix_multiply_fu_220_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln38_fu_814_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((icmp_ln39_fu_838_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((strm_out_V_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln176_fu_854_p2 = (zext_ln39_reg_1072 + zext_ln176_fu_850_p1);

assign add_ln180_1_fu_564_p2 = (zext_ln28_reg_972 + zext_ln180_3_fu_560_p1);

assign add_ln180_fu_274_p2 = (zext_ln20_reg_872 + zext_ln180_fu_270_p1);

assign and_ln282_1_fu_785_p2 = (xor_ln278_1_fu_780_p2 & icmp_ln282_1_reg_1029);

assign and_ln282_fu_495_p2 = (xor_ln278_fu_490_p2 & icmp_ln282_reg_929);

assign and_ln284_1_fu_684_p2 = (xor_ln282_1_fu_678_p2 & icmp_ln284_1_fu_638_p2);

assign and_ln284_fu_394_p2 = (xor_ln282_fu_388_p2 & icmp_ln284_fu_348_p2);

assign and_ln285_1_fu_477_p2 = (xor_ln285_fu_472_p2 & and_ln284_reg_944);

assign and_ln285_2_fu_690_p2 = (icmp_ln285_1_fu_644_p2 & and_ln284_1_fu_684_p2);

assign and_ln285_3_fu_767_p2 = (xor_ln285_1_fu_762_p2 & and_ln284_1_reg_1044);

assign and_ln285_fu_400_p2 = (icmp_ln285_fu_354_p2 & and_ln284_fu_394_p2);

assign and_ln295_1_fu_716_p2 = (xor_ln284_1_fu_710_p2 & icmp_ln295_1_fu_656_p2);

assign and_ln295_fu_426_p2 = (xor_ln284_fu_420_p2 & icmp_ln295_fu_366_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state14 = ((icmp_ln28_fu_548_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((icmp_ln20_fu_258_p2 == 1'd0) & (strm_in_V_V_empty_n == 1'b0));
end

assign exp_V_1_fu_604_p1 = p_Result_4_reg_1011;

assign exp_V_fu_314_p1 = p_Result_s_reg_911;

assign grp_matrix_multiply_fu_220_ap_start = grp_matrix_multiply_fu_220_ap_start_reg;

assign i_2_fu_820_p2 = (i13_0_reg_198 + 8'd1);

assign i_fu_240_p2 = (i_0_reg_154 + 8'd1);

assign icmp_ln19_fu_234_p2 = ((i_0_reg_154 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_258_p2 = ((j_0_reg_165 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln278_1_fu_618_p2 = ((trunc_ln262_1_reg_1001 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln278_fu_328_p2 = ((trunc_ln262_reg_901 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_524_p2 = ((j12_0_reg_176 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln282_1_fu_633_p2 = ((p_Result_4_reg_1011 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln282_fu_343_p2 = ((p_Result_s_reg_911 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln284_1_fu_638_p2 = (($signed(sh_amt_2_fu_623_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln284_fu_348_p2 = (($signed(sh_amt_fu_333_p2) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln285_1_fu_644_p2 = (($signed(sh_amt_2_fu_623_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln285_fu_354_p2 = (($signed(sh_amt_fu_333_p2) < $signed(9'd25)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_548_p2 = ((k_0_reg_187 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln295_1_fu_656_p2 = (($signed(sh_amt_3_fu_650_p2) < $signed(9'd6)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_366_p2 = (($signed(sh_amt_1_fu_360_p2) < $signed(9'd6)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_814_p2 = ((i13_0_reg_198 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_838_p2 = ((k14_0_reg_209 == 7'd64) ? 1'b1 : 1'b0);

assign j_1_fu_264_p2 = (j_0_reg_165 + 9'd1);

assign j_fu_530_p2 = (j12_0_reg_176 + 9'd1);

assign k_2_fu_554_p2 = (k_0_reg_187 + 7'd1);

assign k_fu_844_p2 = (k14_0_reg_209 + 7'd1);

assign lshr_ln286_1_fu_662_p2 = tmp_1_fu_610_p3 >> sext_ln281_1_fu_629_p1;

assign lshr_ln286_fu_372_p2 = tmp_fu_320_p3 >> sext_ln281_fu_339_p1;

assign or_ln282_1_fu_672_p2 = (icmp_ln282_1_fu_633_p2 | icmp_ln278_1_fu_618_p2);

assign or_ln282_fu_382_p2 = (icmp_ln282_fu_343_p2 | icmp_ln278_fu_328_p2);

assign or_ln284_1_fu_704_p2 = (or_ln282_1_fu_672_p2 | icmp_ln284_1_fu_638_p2);

assign or_ln284_fu_414_p2 = (or_ln282_fu_382_p2 | icmp_ln284_fu_348_p2);

assign reg_V_1_fu_574_p1 = grp_fu_227_p1;

assign reg_V_fu_284_p1 = grp_fu_227_p1;

assign select_ln278_1_fu_755_p3 = ((icmp_ln278_1_reg_1023[0:0] === 1'b1) ? 6'd0 : select_ln295_1_fu_749_p3);

assign select_ln278_fu_465_p3 = ((icmp_ln278_reg_923[0:0] === 1'b1) ? 6'd0 : select_ln295_fu_459_p3);

assign select_ln282_1_fu_790_p3 = ((and_ln282_1_fu_785_p2[0:0] === 1'b1) ? trunc_ln283_1_reg_1017 : select_ln285_3_fu_772_p3);

assign select_ln282_fu_500_p3 = ((and_ln282_fu_495_p2[0:0] === 1'b1) ? trunc_ln283_reg_917 : select_ln285_1_fu_482_p3);

assign select_ln285_1_fu_482_p3 = ((and_ln285_1_fu_477_p2[0:0] === 1'b1) ? select_ln288_fu_442_p3 : select_ln278_fu_465_p3);

assign select_ln285_2_fu_696_p3 = ((and_ln285_2_fu_690_p2[0:0] === 1'b1) ? trunc_ln286_1_fu_668_p1 : 6'd0);

assign select_ln285_3_fu_772_p3 = ((and_ln285_3_fu_767_p2[0:0] === 1'b1) ? select_ln288_1_fu_732_p3 : select_ln278_1_fu_755_p3);

assign select_ln285_fu_406_p3 = ((and_ln285_fu_400_p2[0:0] === 1'b1) ? trunc_ln286_fu_378_p1 : 6'd0);

assign select_ln288_1_fu_732_p3 = ((tmp_8_fu_725_p3[0:0] === 1'b1) ? 6'd63 : 6'd0);

assign select_ln288_fu_442_p3 = ((tmp_3_fu_435_p3[0:0] === 1'b1) ? 6'd63 : 6'd0);

assign select_ln295_1_fu_749_p3 = ((and_ln295_1_reg_1054[0:0] === 1'b1) ? shl_ln297_1_fu_744_p2 : select_ln285_2_reg_1049);

assign select_ln295_fu_459_p3 = ((and_ln295_reg_954[0:0] === 1'b1) ? shl_ln297_fu_454_p2 : select_ln285_reg_949);

assign select_ln303_1_fu_803_p3 = ((p_Result_5_reg_1006[0:0] === 1'b1) ? sub_ln461_1_fu_797_p2 : select_ln282_1_fu_790_p3);

assign select_ln303_fu_513_p3 = ((p_Result_3_reg_906[0:0] === 1'b1) ? sub_ln461_fu_507_p2 : select_ln282_fu_500_p3);

assign sext_ln21_fu_279_p1 = $signed(reg_230);

assign sext_ln281_1_fu_629_p1 = sh_amt_2_fu_623_p2;

assign sext_ln281_fu_339_p1 = sh_amt_fu_333_p2;

assign sext_ln294_1_fu_722_p1 = sh_amt_3_reg_1039;

assign sext_ln294_1cast_fu_740_p1 = sext_ln294_1_fu_722_p1[5:0];

assign sext_ln294_fu_432_p1 = sh_amt_1_reg_939;

assign sext_ln294cast_fu_450_p1 = sext_ln294_fu_432_p1[5:0];

assign sext_ln29_fu_569_p1 = $signed(reg_230);

assign sh_amt_1_fu_360_p2 = ($signed(9'd0) - $signed(sh_amt_fu_333_p2));

assign sh_amt_2_fu_623_p2 = (9'd150 - exp_V_1_fu_604_p1);

assign sh_amt_3_fu_650_p2 = ($signed(9'd0) - $signed(sh_amt_2_fu_623_p2));

assign sh_amt_fu_333_p2 = (9'd150 - exp_V_fu_314_p1);

assign shl_ln297_1_fu_744_p2 = trunc_ln283_1_reg_1017 << sext_ln294_1cast_fu_740_p1;

assign shl_ln297_fu_454_p2 = trunc_ln283_reg_917 << sext_ln294cast_fu_450_p1;

assign strm_out_V_V_din = output_q0;

assign sub_ln461_1_fu_797_p2 = (6'd0 - select_ln282_1_fu_790_p3);

assign sub_ln461_fu_507_p2 = (6'd0 - select_ln282_fu_500_p3);

assign tmp_1_fu_610_p3 = {{1'd1}, {trunc_ln270_1_fu_607_p1}};

assign tmp_3_fu_435_p3 = reg_V_reg_895[32'd31];

assign tmp_4_fu_246_p3 = {{i_0_reg_154}, {8'd0}};

assign tmp_5_fu_536_p3 = {{j12_0_reg_176}, {6'd0}};

assign tmp_6_fu_826_p3 = {{i13_0_reg_198}, {6'd0}};

assign tmp_8_fu_725_p3 = reg_V_1_reg_995[32'd31];

assign tmp_fu_320_p3 = {{1'd1}, {trunc_ln270_fu_317_p1}};

assign trunc_ln262_1_fu_578_p1 = reg_V_1_fu_574_p1[30:0];

assign trunc_ln262_fu_288_p1 = reg_V_fu_284_p1[30:0];

assign trunc_ln270_1_fu_607_p1 = reg_V_1_reg_995[22:0];

assign trunc_ln270_fu_317_p1 = reg_V_reg_895[22:0];

assign trunc_ln283_1_fu_600_p1 = reg_V_1_fu_574_p1[5:0];

assign trunc_ln283_fu_310_p1 = reg_V_fu_284_p1[5:0];

assign trunc_ln286_1_fu_668_p1 = lshr_ln286_1_fu_662_p2[5:0];

assign trunc_ln286_fu_378_p1 = lshr_ln286_fu_372_p2[5:0];

assign xor_ln278_1_fu_780_p2 = (icmp_ln278_1_reg_1023 ^ 1'd1);

assign xor_ln278_fu_490_p2 = (icmp_ln278_reg_923 ^ 1'd1);

assign xor_ln282_1_fu_678_p2 = (or_ln282_1_fu_672_p2 ^ 1'd1);

assign xor_ln282_fu_388_p2 = (or_ln282_fu_382_p2 ^ 1'd1);

assign xor_ln284_1_fu_710_p2 = (or_ln284_1_fu_704_p2 ^ 1'd1);

assign xor_ln284_fu_420_p2 = (or_ln284_fu_414_p2 ^ 1'd1);

assign xor_ln285_1_fu_762_p2 = (icmp_ln285_1_reg_1034 ^ 1'd1);

assign xor_ln285_fu_472_p2 = (icmp_ln285_reg_934 ^ 1'd1);

assign zext_ln176_1_fu_859_p1 = add_ln176_fu_854_p2;

assign zext_ln176_fu_850_p1 = k14_0_reg_209;

assign zext_ln180_2_fu_520_p1 = add_ln180_reg_885;

assign zext_ln180_3_fu_560_p1 = k_0_reg_187;

assign zext_ln180_4_fu_810_p1 = add_ln180_1_reg_985;

assign zext_ln180_fu_270_p1 = j_0_reg_165;

assign zext_ln20_fu_254_p1 = tmp_4_fu_246_p3;

assign zext_ln28_fu_544_p1 = tmp_5_fu_536_p3;

assign zext_ln39_fu_834_p1 = tmp_6_fu_826_p3;

always @ (posedge ap_clk) begin
    zext_ln20_reg_872[7:0] <= 8'b00000000;
    zext_ln20_reg_872[16] <= 1'b0;
    zext_ln28_reg_972[5:0] <= 6'b000000;
    zext_ln28_reg_972[15] <= 1'b0;
    zext_ln39_reg_1072[5:0] <= 6'b000000;
    zext_ln39_reg_1072[14] <= 1'b0;
end

endmodule //dut
