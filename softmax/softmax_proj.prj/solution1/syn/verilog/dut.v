// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=19,HLS_SYN_FF=3086,HLS_SYN_LUT=5172,HLS_VERSION=2019_2_1}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_a_V_dout,
        strm_in_a_V_empty_n,
        strm_in_a_V_read,
        strm_out_V_din,
        strm_out_V_full_n,
        strm_out_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] strm_in_a_V_dout;
input   strm_in_a_V_empty_n;
output   strm_in_a_V_read;
output  [31:0] strm_out_V_din;
input   strm_out_V_full_n;
output   strm_out_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_a_V_read;
reg strm_out_V_write;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    strm_in_a_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_117_p2;
reg    strm_out_V_blk_n;
wire    ap_CS_fsm_state5;
wire   [7:0] i_fu_123_p2;
reg    ap_block_state2;
wire   [7:0] i_1_fu_140_p2;
reg   [7:0] i_1_reg_162;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln23_fu_134_p2;
reg   [6:0] input1_address0;
reg    input1_ce0;
reg    input1_we0;
wire   [31:0] input1_q0;
reg   [6:0] output_address0;
reg    output_ce0;
reg    output_we0;
wire   [31:0] output_q0;
wire    grp_softmax_128_s_fu_111_ap_start;
wire    grp_softmax_128_s_fu_111_ap_done;
wire    grp_softmax_128_s_fu_111_ap_idle;
wire    grp_softmax_128_s_fu_111_ap_ready;
wire   [6:0] grp_softmax_128_s_fu_111_output_layer_address0;
wire    grp_softmax_128_s_fu_111_output_layer_ce0;
wire   [6:0] grp_softmax_128_s_fu_111_probability_distribu_address0;
wire    grp_softmax_128_s_fu_111_probability_distribu_ce0;
wire    grp_softmax_128_s_fu_111_probability_distribu_we0;
wire   [31:0] grp_softmax_128_s_fu_111_probability_distribu_d0;
reg   [7:0] i_0_reg_89;
reg   [7:0] i1_0_reg_100;
wire    ap_CS_fsm_state3;
reg    grp_softmax_128_s_fu_111_ap_start_reg;
reg    ap_block_state2_ignore_call0;
wire   [63:0] zext_ln16_fu_129_p1;
wire   [63:0] zext_ln24_fu_146_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_softmax_128_s_fu_111_ap_start_reg = 1'b0;
end

softmax_128_s_eulbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
input1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input1_address0),
    .ce0(input1_ce0),
    .we0(input1_we0),
    .d0(strm_in_a_V_dout),
    .q0(input1_q0)
);

softmax_128_s_eulbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
output_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_address0),
    .ce0(output_ce0),
    .we0(output_we0),
    .d0(grp_softmax_128_s_fu_111_probability_distribu_d0),
    .q0(output_q0)
);

softmax_128_s grp_softmax_128_s_fu_111(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_softmax_128_s_fu_111_ap_start),
    .ap_done(grp_softmax_128_s_fu_111_ap_done),
    .ap_idle(grp_softmax_128_s_fu_111_ap_idle),
    .ap_ready(grp_softmax_128_s_fu_111_ap_ready),
    .output_layer_address0(grp_softmax_128_s_fu_111_output_layer_address0),
    .output_layer_ce0(grp_softmax_128_s_fu_111_output_layer_ce0),
    .output_layer_q0(input1_q0),
    .probability_distribu_address0(grp_softmax_128_s_fu_111_probability_distribu_address0),
    .probability_distribu_ce0(grp_softmax_128_s_fu_111_probability_distribu_ce0),
    .probability_distribu_we0(grp_softmax_128_s_fu_111_probability_distribu_we0),
    .probability_distribu_d0(grp_softmax_128_s_fu_111_probability_distribu_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_softmax_128_s_fu_111_ap_start_reg <= 1'b0;
    end else begin
        if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_softmax_128_s_fu_111_ap_start_reg <= 1'b1;
        end else if ((grp_softmax_128_s_fu_111_ap_ready == 1'b1)) begin
            grp_softmax_128_s_fu_111_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((strm_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        i1_0_reg_100 <= i_1_reg_162;
    end else if (((grp_softmax_128_s_fu_111_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i1_0_reg_100 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_89 <= i_fu_123_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_89 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_162 <= i_1_fu_140_p2;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input1_address0 = zext_ln16_fu_129_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input1_address0 = grp_softmax_128_s_fu_111_output_layer_address0;
    end else begin
        input1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input1_ce0 = grp_softmax_128_s_fu_111_output_layer_ce0;
    end else begin
        input1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input1_we0 = 1'b1;
    end else begin
        input1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_address0 = zext_ln24_fu_146_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_address0 = grp_softmax_128_s_fu_111_probability_distribu_address0;
    end else begin
        output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_ce0 = grp_softmax_128_s_fu_111_probability_distribu_ce0;
    end else begin
        output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_we0 = grp_softmax_128_s_fu_111_probability_distribu_we0;
    end else begin
        output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_a_V_blk_n = strm_in_a_V_empty_n;
    end else begin
        strm_in_a_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        strm_in_a_V_read = 1'b1;
    end else begin
        strm_in_a_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        strm_out_V_blk_n = strm_out_V_full_n;
    end else begin
        strm_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((strm_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        strm_out_V_write = 1'b1;
    end else begin
        strm_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0)) & (icmp_ln14_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_softmax_128_s_fu_111_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln23_fu_134_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((strm_out_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2 = ((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((icmp_ln14_fu_117_p2 == 1'd0) & (strm_in_a_V_empty_n == 1'b0));
end

assign grp_softmax_128_s_fu_111_ap_start = grp_softmax_128_s_fu_111_ap_start_reg;

assign i_1_fu_140_p2 = (i1_0_reg_100 + 8'd1);

assign i_fu_123_p2 = (i_0_reg_89 + 8'd1);

assign icmp_ln14_fu_117_p2 = ((i_0_reg_89 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_134_p2 = ((i1_0_reg_100 == 8'd128) ? 1'b1 : 1'b0);

assign strm_out_V_din = output_q0;

assign zext_ln16_fu_129_p1 = i_0_reg_89;

assign zext_ln24_fu_146_p1 = i1_0_reg_100;

endmodule //dut
