// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_128_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_layer_address0,
        output_layer_ce0,
        output_layer_q0,
        probability_distribu_address0,
        probability_distribu_ce0,
        probability_distribu_we0,
        probability_distribu_d0
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_state3 = 69'd4;
parameter    ap_ST_fsm_state4 = 69'd8;
parameter    ap_ST_fsm_state5 = 69'd16;
parameter    ap_ST_fsm_state6 = 69'd32;
parameter    ap_ST_fsm_state7 = 69'd64;
parameter    ap_ST_fsm_state8 = 69'd128;
parameter    ap_ST_fsm_state9 = 69'd256;
parameter    ap_ST_fsm_state10 = 69'd512;
parameter    ap_ST_fsm_state11 = 69'd1024;
parameter    ap_ST_fsm_state12 = 69'd2048;
parameter    ap_ST_fsm_state13 = 69'd4096;
parameter    ap_ST_fsm_state14 = 69'd8192;
parameter    ap_ST_fsm_state15 = 69'd16384;
parameter    ap_ST_fsm_state16 = 69'd32768;
parameter    ap_ST_fsm_state17 = 69'd65536;
parameter    ap_ST_fsm_state18 = 69'd131072;
parameter    ap_ST_fsm_state19 = 69'd262144;
parameter    ap_ST_fsm_state20 = 69'd524288;
parameter    ap_ST_fsm_state21 = 69'd1048576;
parameter    ap_ST_fsm_state22 = 69'd2097152;
parameter    ap_ST_fsm_state23 = 69'd4194304;
parameter    ap_ST_fsm_state24 = 69'd8388608;
parameter    ap_ST_fsm_state25 = 69'd16777216;
parameter    ap_ST_fsm_state26 = 69'd33554432;
parameter    ap_ST_fsm_state27 = 69'd67108864;
parameter    ap_ST_fsm_state28 = 69'd134217728;
parameter    ap_ST_fsm_state29 = 69'd268435456;
parameter    ap_ST_fsm_state30 = 69'd536870912;
parameter    ap_ST_fsm_state31 = 69'd1073741824;
parameter    ap_ST_fsm_state32 = 69'd2147483648;
parameter    ap_ST_fsm_state33 = 69'd4294967296;
parameter    ap_ST_fsm_state34 = 69'd8589934592;
parameter    ap_ST_fsm_state35 = 69'd17179869184;
parameter    ap_ST_fsm_state36 = 69'd34359738368;
parameter    ap_ST_fsm_state37 = 69'd68719476736;
parameter    ap_ST_fsm_state38 = 69'd137438953472;
parameter    ap_ST_fsm_state39 = 69'd274877906944;
parameter    ap_ST_fsm_state40 = 69'd549755813888;
parameter    ap_ST_fsm_state41 = 69'd1099511627776;
parameter    ap_ST_fsm_state42 = 69'd2199023255552;
parameter    ap_ST_fsm_state43 = 69'd4398046511104;
parameter    ap_ST_fsm_state44 = 69'd8796093022208;
parameter    ap_ST_fsm_state45 = 69'd17592186044416;
parameter    ap_ST_fsm_state46 = 69'd35184372088832;
parameter    ap_ST_fsm_state47 = 69'd70368744177664;
parameter    ap_ST_fsm_state48 = 69'd140737488355328;
parameter    ap_ST_fsm_state49 = 69'd281474976710656;
parameter    ap_ST_fsm_state50 = 69'd562949953421312;
parameter    ap_ST_fsm_state51 = 69'd1125899906842624;
parameter    ap_ST_fsm_state52 = 69'd2251799813685248;
parameter    ap_ST_fsm_state53 = 69'd4503599627370496;
parameter    ap_ST_fsm_state54 = 69'd9007199254740992;
parameter    ap_ST_fsm_state55 = 69'd18014398509481984;
parameter    ap_ST_fsm_state56 = 69'd36028797018963968;
parameter    ap_ST_fsm_state57 = 69'd72057594037927936;
parameter    ap_ST_fsm_state58 = 69'd144115188075855872;
parameter    ap_ST_fsm_state59 = 69'd288230376151711744;
parameter    ap_ST_fsm_state60 = 69'd576460752303423488;
parameter    ap_ST_fsm_state61 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 69'd295147905179352825856;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] output_layer_address0;
output   output_layer_ce0;
input  [31:0] output_layer_q0;
output  [6:0] probability_distribu_address0;
output   probability_distribu_ce0;
output   probability_distribu_we0;
output  [31:0] probability_distribu_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_layer_ce0;
reg probability_distribu_ce0;
reg probability_distribu_we0;

(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_177_p2;
reg   [31:0] reg_203;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state68;
wire   [63:0] grp_fu_189_p1;
reg   [63:0] reg_209;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state35;
wire   [7:0] i_fu_221_p2;
reg   [7:0] i_reg_280;
wire    ap_CS_fsm_state2;
reg   [6:0] euler_sums_addr_reg_285;
wire   [0:0] icmp_ln16_fu_215_p2;
reg   [31:0] output_layer_load_reg_295;
wire    ap_CS_fsm_state3;
wire   [31:0] zext_ln19_fu_233_p1;
reg   [31:0] zext_ln19_reg_300;
wire    ap_CS_fsm_state4;
wire   [31:0] k_fu_248_p2;
reg   [31:0] k_reg_311;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_fu_243_p2;
wire   [6:0] add_ln19_fu_254_p2;
reg   [6:0] add_ln19_reg_316;
wire   [31:0] grp_fu_182_p1;
reg   [31:0] tmp_6_reg_321;
wire    ap_CS_fsm_state10;
wire   [63:0] grp_fu_198_p2;
wire    ap_CS_fsm_state34;
wire   [63:0] grp_fu_193_p2;
reg   [63:0] tmp_4_reg_331;
wire    ap_CS_fsm_state40;
wire   [31:0] grp_fu_186_p1;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] tmp_1_reg_341;
wire    ap_CS_fsm_state45;
wire   [31:0] grp_fu_166_p2;
wire    ap_CS_fsm_state50;
wire   [7:0] j_fu_266_p2;
reg   [7:0] j_reg_355;
wire    ap_CS_fsm_state51;
wire   [63:0] zext_ln33_fu_272_p1;
reg   [63:0] zext_ln33_reg_360;
wire   [0:0] icmp_ln32_fu_260_p2;
wire   [31:0] euler_sums_q0;
reg   [31:0] euler_sums_load_reg_370;
wire    ap_CS_fsm_state52;
reg   [6:0] euler_sums_address0;
reg    euler_sums_ce0;
reg    euler_sums_we0;
reg   [7:0] i_0_reg_84;
reg   [31:0] euler_layer_sum_0_reg_95;
reg   [31:0] empty_4_reg_107;
reg   [6:0] indvars_iv_reg_119;
reg   [63:0] term_0_reg_131;
wire   [0:0] icmp_ln19_fu_237_p2;
reg   [31:0] k_0_reg_143;
reg   [7:0] j1_0_reg_155;
wire    ap_CS_fsm_state69;
wire   [63:0] zext_ln18_fu_227_p1;
wire    ap_CS_fsm_state46;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state41;
reg   [31:0] grp_fu_189_p0;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state29;
reg   [68:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
end

softmax_128_s_eulbkb #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
euler_sums_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(euler_sums_address0),
    .ce0(euler_sums_ce0),
    .we0(euler_sums_we0),
    .d0(tmp_1_reg_341),
    .q0(euler_sums_q0)
);

dut_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fadd_32ns_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(euler_layer_sum_0_reg_95),
    .din1(tmp_1_reg_341),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

dut_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fmul_32ns_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(empty_4_reg_107),
    .din1(32'd1076754516),
    .ce(1'b1),
    .dout(grp_fu_171_p2)
);

dut_fdiv_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_fdiv_32ns_32neOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

dut_sitofp_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dut_sitofp_32ns_3fYi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(k_0_reg_143),
    .ce(1'b1),
    .dout(grp_fu_182_p1)
);

dut_fptrunc_64ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
dut_fptrunc_64ns_g8j_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_331),
    .ce(1'b1),
    .dout(grp_fu_186_p1)
);

dut_fpext_32ns_64hbi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
dut_fpext_32ns_64hbi_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .ce(1'b1),
    .dout(grp_fu_189_p1)
);

dut_dadd_64ns_64nibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dadd_64ns_64nibs_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_209),
    .din1(term_0_reg_131),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

dut_dmul_64ns_64njbC #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dut_dmul_64ns_64njbC_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(term_0_reg_131),
    .din1(reg_209),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_4_reg_107 <= 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        empty_4_reg_107 <= grp_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        euler_layer_sum_0_reg_95 <= grp_fu_166_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        euler_layer_sum_0_reg_95 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        i_0_reg_84 <= i_reg_280;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_84 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvars_iv_reg_119 <= 7'd2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        indvars_iv_reg_119 <= add_ln19_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_215_p2 == 1'd1))) begin
        j1_0_reg_155 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        j1_0_reg_155 <= j_reg_355;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_237_p2 == 1'd0))) begin
        k_0_reg_143 <= 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        k_0_reg_143 <= k_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_237_p2 == 1'd0))) begin
        term_0_reg_131 <= 64'd4607182418800017408;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        term_0_reg_131 <= grp_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_243_p2 == 1'd1))) begin
        add_ln19_reg_316 <= add_ln19_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_215_p2 == 1'd0))) begin
        euler_sums_addr_reg_285 <= zext_ln18_fu_227_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        euler_sums_load_reg_370 <= euler_sums_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_280 <= i_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        j_reg_355 <= j_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_243_p2 == 1'd0))) begin
        k_reg_311 <= k_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_layer_load_reg_295 <= output_layer_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_203 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_209 <= grp_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        tmp_1_reg_341 <= grp_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        tmp_4_reg_331 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_6_reg_321 <= grp_fu_182_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        zext_ln19_reg_300[6 : 0] <= zext_ln19_fu_233_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln32_fu_260_p2 == 1'd0))) begin
        zext_ln33_reg_360[7 : 0] <= zext_ln33_fu_272_p1[7 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state51) & (icmp_ln32_fu_260_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln32_fu_260_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        euler_sums_address0 = zext_ln33_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        euler_sums_address0 = euler_sums_addr_reg_285;
    end else begin
        euler_sums_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state51))) begin
        euler_sums_ce0 = 1'b1;
    end else begin
        euler_sums_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        euler_sums_we0 = 1'b1;
    end else begin
        euler_sums_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_177_p0 = euler_sums_load_reg_370;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_177_p0 = output_layer_load_reg_295;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        grp_fu_177_p1 = euler_layer_sum_0_reg_95;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_177_p1 = tmp_6_reg_321;
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_189_p0 = reg_203;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_189_p0 = empty_4_reg_107;
    end else begin
        grp_fu_189_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        output_layer_ce0 = 1'b1;
    end else begin
        output_layer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        probability_distribu_ce0 = 1'b1;
    end else begin
        probability_distribu_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        probability_distribu_we0 = 1'b1;
    end else begin
        probability_distribu_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_215_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln19_fu_237_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_243_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state51 : begin
            if (((1'b1 == ap_CS_fsm_state51) & (icmp_ln32_fu_260_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_254_p2 = (indvars_iv_reg_119 + 7'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign i_fu_221_p2 = (i_0_reg_84 + 8'd1);

assign icmp_ln16_fu_215_p2 = ((i_0_reg_84 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_237_p2 = ((indvars_iv_reg_119 == 7'd102) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_243_p2 = ((k_0_reg_143 == zext_ln19_reg_300) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_260_p2 = ((j1_0_reg_155 == 8'd128) ? 1'b1 : 1'b0);

assign j_fu_266_p2 = (j1_0_reg_155 + 8'd1);

assign k_fu_248_p2 = (k_0_reg_143 + 32'd1);

assign output_layer_address0 = zext_ln18_fu_227_p1;

assign probability_distribu_address0 = zext_ln33_reg_360;

assign probability_distribu_d0 = reg_203;

assign zext_ln18_fu_227_p1 = i_0_reg_84;

assign zext_ln19_fu_233_p1 = indvars_iv_reg_119;

assign zext_ln33_fu_272_p1 = j1_0_reg_155;

always @ (posedge ap_clk) begin
    zext_ln19_reg_300[31:7] <= 25'b0000000000000000000000000;
    zext_ln33_reg_360[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //softmax_128_s
